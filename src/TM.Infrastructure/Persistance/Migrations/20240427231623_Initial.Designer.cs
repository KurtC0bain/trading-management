// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TM.Infrastructure.Persistance;

#nullable disable

namespace TM.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(TradeManagementDbContext))]
    [Migration("20240427231623_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FactorSetup", b =>
                {
                    b.Property<string>("SetupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FactorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SetupId", "FactorId");

                    b.HasIndex("FactorId");

                    b.ToTable("FactorSetup");

                    b.HasData(
                        new
                        {
                            SetupId = "d8fa67a3-7031-4fbe-aa6d-1193107bede5",
                            FactorId = "2a2beebc-6acb-4112-a527-de638e47ac73"
                        },
                        new
                        {
                            SetupId = "d8fa67a3-7031-4fbe-aa6d-1193107bede5",
                            FactorId = "594383d9-a4ea-440d-91ad-c081427eca03"
                        },
                        new
                        {
                            SetupId = "53e794a6-bf7f-462d-b0e1-80b8380cfcda",
                            FactorId = "594383d9-a4ea-440d-91ad-c081427eca03"
                        },
                        new
                        {
                            SetupId = "53e794a6-bf7f-462d-b0e1-80b8380cfcda",
                            FactorId = "074f7937-0dd3-4349-9896-94a1e57f2c9a"
                        },
                        new
                        {
                            SetupId = "2a1a37eb-2efe-46f1-879d-2236c0f38331",
                            FactorId = "2a2beebc-6acb-4112-a527-de638e47ac73"
                        },
                        new
                        {
                            SetupId = "2a1a37eb-2efe-46f1-879d-2236c0f38331",
                            FactorId = "074f7937-0dd3-4349-9896-94a1e57f2c9a"
                        },
                        new
                        {
                            SetupId = "2a1a37eb-2efe-46f1-879d-2236c0f38331",
                            FactorId = "594383d9-a4ea-440d-91ad-c081427eca03"
                        });
                });

            modelBuilder.Entity("TM.Domain.Entities.Factor", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Factors");

                    b.HasData(
                        new
                        {
                            ID = "2a2beebc-6acb-4112-a527-de638e47ac73",
                            Description = "Order block",
                            Name = "OB",
                            Priority = 1,
                            UserID = "0ee200cc-eff4-469e-90b2-866bd2d818e0"
                        },
                        new
                        {
                            ID = "594383d9-a4ea-440d-91ad-c081427eca03",
                            Description = "Break of structure",
                            Name = "BOS",
                            Priority = 2,
                            UserID = "26975d5d-3138-4a94-baff-56f045796c42"
                        },
                        new
                        {
                            ID = "074f7937-0dd3-4349-9896-94a1e57f2c9a",
                            Description = "Fair value gap",
                            Name = "FVG",
                            Priority = 2,
                            UserID = "546ab7d4-a4d5-4270-a6f6-c48a30aeb275"
                        });
                });

            modelBuilder.Entity("TM.Domain.Entities.Pair", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Pairs");

                    b.HasData(
                        new
                        {
                            ID = "588511af-1559-4aa9-8244-f0ade8db321e",
                            Description = "BTCUSDT pair",
                            Name = "BTCUSDT"
                        },
                        new
                        {
                            ID = "b82daf79-233a-404a-8f96-64f1502bf48f",
                            Description = "ETHUSDT pair",
                            Name = "ETHUSDT"
                        },
                        new
                        {
                            ID = "0c1c07ba-1bb3-4989-8e49-24e3d35fd262",
                            Description = "SOLUSDT pair",
                            Name = "SOLUSDT"
                        });
                });

            modelBuilder.Entity("TM.Domain.Entities.Setup", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Setups");

                    b.HasData(
                        new
                        {
                            ID = "d8fa67a3-7031-4fbe-aa6d-1193107bede5",
                            Description = "test 1",
                            Name = "Morning",
                            UserID = "3fca17cd-eba9-4165-80c0-9f8a1f0906b3"
                        },
                        new
                        {
                            ID = "53e794a6-bf7f-462d-b0e1-80b8380cfcda",
                            Description = "test 2",
                            Name = "Afternoon",
                            UserID = "48617856-fbdf-4f88-b2e7-05256c17bb0b"
                        },
                        new
                        {
                            ID = "2a1a37eb-2efe-46f1-879d-2236c0f38331",
                            Description = "test 3",
                            Name = "Evening",
                            UserID = "5e5947d9-9116-4f20-aeea-0269550898f7"
                        });
                });

            modelBuilder.Entity("TM.Domain.Entities.Trade", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("DepositRisk")
                        .HasColumnType("float");

                    b.Property<int>("DirectionType")
                        .HasColumnType("int");

                    b.Property<double>("InitialDeposit")
                        .HasColumnType("float");

                    b.Property<string>("PairID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PositionType")
                        .HasColumnType("int");

                    b.Property<double>("PriceEntry")
                        .HasColumnType("float");

                    b.Property<double>("PriceStop")
                        .HasColumnType("float");

                    b.Property<double>("PriceTake")
                        .HasColumnType("float");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ResultType")
                        .HasColumnType("int");

                    b.Property<double>("RiskRewardRatio")
                        .HasColumnType("float");

                    b.Property<string>("SetupID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PairID");

                    b.HasIndex("SetupID");

                    b.ToTable("Trades");

                    b.HasData(
                        new
                        {
                            ID = "87fef7ad-4d02-4c2e-85d7-b3086c923b4c",
                            Date = new DateTime(2024, 4, 28, 2, 16, 23, 347, DateTimeKind.Local).AddTicks(404),
                            DepositRisk = 2.0,
                            DirectionType = 0,
                            InitialDeposit = 500.0,
                            PairID = "588511af-1559-4aa9-8244-f0ade8db321e",
                            PositionType = 0,
                            PriceEntry = 60000.0,
                            PriceStop = 59900.0,
                            PriceTake = 60500.0,
                            Profit = 4999.9999999998681,
                            Rating = 4,
                            ResultType = 0,
                            RiskRewardRatio = 5.0,
                            SetupID = "d8fa67a3-7031-4fbe-aa6d-1193107bede5",
                            UserID = "c1ac02bb-0087-46bb-aae2-120b6d7d71e7"
                        },
                        new
                        {
                            ID = "284cd2cd-63ff-46f4-b544-6226d406e4a6",
                            Date = new DateTime(2024, 4, 28, 2, 16, 23, 347, DateTimeKind.Local).AddTicks(458),
                            DepositRisk = 2.0,
                            DirectionType = 1,
                            InitialDeposit = 500.0,
                            PairID = "b82daf79-233a-404a-8f96-64f1502bf48f",
                            PositionType = 1,
                            PriceEntry = 3200.0,
                            PriceStop = 3225.0,
                            PriceTake = 3150.0,
                            Profit = 2000.0,
                            Rating = 3,
                            ResultType = 1,
                            RiskRewardRatio = 2.0,
                            SetupID = "2a1a37eb-2efe-46f1-879d-2236c0f38331",
                            UserID = "d5294903-fbd0-499b-acca-ba9d12a4184d"
                        });
                });

            modelBuilder.Entity("FactorSetup", b =>
                {
                    b.HasOne("TM.Domain.Entities.Factor", null)
                        .WithMany()
                        .HasForeignKey("FactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TM.Domain.Entities.Setup", null)
                        .WithMany()
                        .HasForeignKey("SetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TM.Domain.Entities.Trade", b =>
                {
                    b.HasOne("TM.Domain.Entities.Pair", "Pair")
                        .WithMany("Trades")
                        .HasForeignKey("PairID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TM.Domain.Entities.Setup", "Setup")
                        .WithMany("Trades")
                        .HasForeignKey("SetupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pair");

                    b.Navigation("Setup");
                });

            modelBuilder.Entity("TM.Domain.Entities.Pair", b =>
                {
                    b.Navigation("Trades");
                });

            modelBuilder.Entity("TM.Domain.Entities.Setup", b =>
                {
                    b.Navigation("Trades");
                });
#pragma warning restore 612, 618
        }
    }
}
