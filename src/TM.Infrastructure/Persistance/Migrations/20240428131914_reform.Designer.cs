// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TM.Infrastructure.Persistance;

#nullable disable

namespace TM.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(TradeManagementDbContext))]
    [Migration("20240428131914_reform")]
    partial class reform
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FactorSetup", b =>
                {
                    b.Property<string>("SetupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FactorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SetupId", "FactorId");

                    b.HasIndex("FactorId");

                    b.ToTable("FactorSetup");

                    b.HasData(
                        new
                        {
                            SetupId = "93630a77-33c2-4208-8e2d-7b69e1d85438",
                            FactorId = "795119c9-8f5b-4fd0-9006-7bcfacdf0700"
                        },
                        new
                        {
                            SetupId = "93630a77-33c2-4208-8e2d-7b69e1d85438",
                            FactorId = "cf9f351a-6e7b-4b82-b213-95dfaa9b9e02"
                        },
                        new
                        {
                            SetupId = "286422c6-981c-4e0f-becb-d65b73e358f6",
                            FactorId = "cf9f351a-6e7b-4b82-b213-95dfaa9b9e02"
                        },
                        new
                        {
                            SetupId = "286422c6-981c-4e0f-becb-d65b73e358f6",
                            FactorId = "baecda96-5677-4025-9c5b-841d4dc4382e"
                        },
                        new
                        {
                            SetupId = "ac7fd1ce-5679-449c-bbc1-984cf757d269",
                            FactorId = "795119c9-8f5b-4fd0-9006-7bcfacdf0700"
                        },
                        new
                        {
                            SetupId = "ac7fd1ce-5679-449c-bbc1-984cf757d269",
                            FactorId = "baecda96-5677-4025-9c5b-841d4dc4382e"
                        },
                        new
                        {
                            SetupId = "ac7fd1ce-5679-449c-bbc1-984cf757d269",
                            FactorId = "cf9f351a-6e7b-4b82-b213-95dfaa9b9e02"
                        });
                });

            modelBuilder.Entity("TM.Domain.Entities.Factor", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Factors");

                    b.HasData(
                        new
                        {
                            ID = "795119c9-8f5b-4fd0-9006-7bcfacdf0700",
                            Description = "Order block",
                            Name = "OB",
                            Priority = 1,
                            UserID = "9609c3fc-ed25-4c31-b4ea-4e744496bf17"
                        },
                        new
                        {
                            ID = "cf9f351a-6e7b-4b82-b213-95dfaa9b9e02",
                            Description = "Break of structure",
                            Name = "BOS",
                            Priority = 2,
                            UserID = "fbff5bd0-f6fb-4bd8-b77c-04ac939fcd4f"
                        },
                        new
                        {
                            ID = "baecda96-5677-4025-9c5b-841d4dc4382e",
                            Description = "Fair value gap",
                            Name = "FVG",
                            Priority = 2,
                            UserID = "0b20ad6e-4475-4288-8505-c5d34955bbf6"
                        });
                });

            modelBuilder.Entity("TM.Domain.Entities.Pair", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Pairs");

                    b.HasData(
                        new
                        {
                            ID = "395bf86c-a851-4575-b4d5-4607d6477ac4",
                            Description = "BTCUSDT pair",
                            Name = "BTCUSDT"
                        },
                        new
                        {
                            ID = "6c8163e2-65df-4c01-9fc6-84858ebc5853",
                            Description = "ETHUSDT pair",
                            Name = "ETHUSDT"
                        },
                        new
                        {
                            ID = "8d34d234-e66a-493c-84b5-9b16bc6b91e0",
                            Description = "SOLUSDT pair",
                            Name = "SOLUSDT"
                        });
                });

            modelBuilder.Entity("TM.Domain.Entities.Setup", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Setups");

                    b.HasData(
                        new
                        {
                            ID = "93630a77-33c2-4208-8e2d-7b69e1d85438",
                            Description = "test 1",
                            Name = "Morning",
                            UserID = "70fc5930-5e10-4ceb-ba06-c5ed8427d143"
                        },
                        new
                        {
                            ID = "286422c6-981c-4e0f-becb-d65b73e358f6",
                            Description = "test 2",
                            Name = "Afternoon",
                            UserID = "8fc5a4c4-4a65-4bc1-aab8-c4906a57deb5"
                        },
                        new
                        {
                            ID = "ac7fd1ce-5679-449c-bbc1-984cf757d269",
                            Description = "test 3",
                            Name = "Evening",
                            UserID = "a2befac7-6207-4857-818d-2eba4549617a"
                        });
                });

            modelBuilder.Entity("TM.Domain.Entities.Trade", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("DepositRisk")
                        .HasColumnType("float");

                    b.Property<int>("DirectionType")
                        .HasColumnType("int");

                    b.Property<double>("InitialDeposit")
                        .HasColumnType("float");

                    b.Property<string>("PairID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PositionType")
                        .HasColumnType("int");

                    b.Property<double>("PriceEntry")
                        .HasColumnType("float");

                    b.Property<double>("PriceStop")
                        .HasColumnType("float");

                    b.Property<double>("PriceTake")
                        .HasColumnType("float");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("ResultType")
                        .HasColumnType("int");

                    b.Property<double>("RiskAmount")
                        .HasColumnType("float");

                    b.Property<double>("RiskRewardRatio")
                        .HasColumnType("float");

                    b.Property<string>("SetupID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PairID");

                    b.HasIndex("SetupID");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("FactorSetup", b =>
                {
                    b.HasOne("TM.Domain.Entities.Factor", null)
                        .WithMany()
                        .HasForeignKey("FactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TM.Domain.Entities.Setup", null)
                        .WithMany()
                        .HasForeignKey("SetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TM.Domain.Entities.Trade", b =>
                {
                    b.HasOne("TM.Domain.Entities.Pair", "Pair")
                        .WithMany("Trades")
                        .HasForeignKey("PairID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TM.Domain.Entities.Setup", "Setup")
                        .WithMany("Trades")
                        .HasForeignKey("SetupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pair");

                    b.Navigation("Setup");
                });

            modelBuilder.Entity("TM.Domain.Entities.Pair", b =>
                {
                    b.Navigation("Trades");
                });

            modelBuilder.Entity("TM.Domain.Entities.Setup", b =>
                {
                    b.Navigation("Trades");
                });
#pragma warning restore 612, 618
        }
    }
}
