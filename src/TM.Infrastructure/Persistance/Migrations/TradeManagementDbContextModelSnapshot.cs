// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TM.Infrastructure.Persistance;

#nullable disable

namespace TM.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(TradeManagementDbContext))]
    partial class TradeManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FactorSetup", b =>
                {
                    b.Property<string>("SetupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FactorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SetupId", "FactorId");

                    b.HasIndex("FactorId");

                    b.ToTable("FactorSetup");

                    b.HasData(
                        new
                        {
                            SetupId = "acb559d1-6e59-424c-bdeb-0c5a3bb5acc3",
                            FactorId = "bb17b8c9-f952-4bc5-8ee0-6c3cacf7f3cd"
                        },
                        new
                        {
                            SetupId = "acb559d1-6e59-424c-bdeb-0c5a3bb5acc3",
                            FactorId = "f6ef8223-74bf-41f3-9591-88ab1637a799"
                        },
                        new
                        {
                            SetupId = "a6aab8ec-e896-4cc0-96fa-88686aad4dcf",
                            FactorId = "f6ef8223-74bf-41f3-9591-88ab1637a799"
                        },
                        new
                        {
                            SetupId = "a6aab8ec-e896-4cc0-96fa-88686aad4dcf",
                            FactorId = "2225482d-c1e9-4645-93fa-52d6a0d5e3e1"
                        },
                        new
                        {
                            SetupId = "2b5103be-3857-43a3-a89c-7cd0a679fcd6",
                            FactorId = "bb17b8c9-f952-4bc5-8ee0-6c3cacf7f3cd"
                        },
                        new
                        {
                            SetupId = "2b5103be-3857-43a3-a89c-7cd0a679fcd6",
                            FactorId = "2225482d-c1e9-4645-93fa-52d6a0d5e3e1"
                        },
                        new
                        {
                            SetupId = "2b5103be-3857-43a3-a89c-7cd0a679fcd6",
                            FactorId = "f6ef8223-74bf-41f3-9591-88ab1637a799"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TM.Domain.Entities.Factor", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Factors");

                    b.HasData(
                        new
                        {
                            ID = "bb17b8c9-f952-4bc5-8ee0-6c3cacf7f3cd",
                            Description = "Order block",
                            Name = "OB",
                            Priority = 1,
                            UserID = "b5401462-8ad7-4ef4-9dba-e7c0af483068"
                        },
                        new
                        {
                            ID = "f6ef8223-74bf-41f3-9591-88ab1637a799",
                            Description = "Break of structure",
                            Name = "BOS",
                            Priority = 2,
                            UserID = "6ac7ace0-b449-45a2-9ecd-c5efc8bb56e7"
                        },
                        new
                        {
                            ID = "2225482d-c1e9-4645-93fa-52d6a0d5e3e1",
                            Description = "Fair value gap",
                            Name = "FVG",
                            Priority = 2,
                            UserID = "dc4c55b1-29f7-4a94-bbcc-bf66175f3139"
                        });
                });

            modelBuilder.Entity("TM.Domain.Entities.Pair", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Pairs");

                    b.HasData(
                        new
                        {
                            ID = "424b176f-0977-46a4-a843-7163d0de5050",
                            Description = "BTCUSDT pair",
                            Name = "BTCUSDT"
                        },
                        new
                        {
                            ID = "e9181128-28e2-4acb-995b-c3f0405c5d64",
                            Description = "ETHUSDT pair",
                            Name = "ETHUSDT"
                        },
                        new
                        {
                            ID = "7bf9f125-3a27-4e6c-9f52-6a68673dd1ad",
                            Description = "SOLUSDT pair",
                            Name = "SOLUSDT"
                        });
                });

            modelBuilder.Entity("TM.Domain.Entities.Setup", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Setups");

                    b.HasData(
                        new
                        {
                            ID = "acb559d1-6e59-424c-bdeb-0c5a3bb5acc3",
                            Description = "test 1",
                            Name = "Morning",
                            UserID = "f3a062ef-f515-4dfc-8eb4-3d261c767f72"
                        },
                        new
                        {
                            ID = "a6aab8ec-e896-4cc0-96fa-88686aad4dcf",
                            Description = "test 2",
                            Name = "Afternoon",
                            UserID = "ebc1ad7d-0443-4717-8fef-5f63cc406316"
                        },
                        new
                        {
                            ID = "2b5103be-3857-43a3-a89c-7cd0a679fcd6",
                            Description = "test 3",
                            Name = "Evening",
                            UserID = "3bad7a07-a181-4d54-b4b7-41c15363e114"
                        });
                });

            modelBuilder.Entity("TM.Domain.Entities.Trade", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("DepositRisk")
                        .HasColumnType("float");

                    b.Property<int>("DirectionType")
                        .HasColumnType("int");

                    b.Property<double>("InitialDeposit")
                        .HasColumnType("float");

                    b.Property<string>("PairID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PositionType")
                        .HasColumnType("int");

                    b.Property<double>("PriceEntry")
                        .HasColumnType("float");

                    b.Property<double>("PriceStop")
                        .HasColumnType("float");

                    b.Property<double>("PriceTake")
                        .HasColumnType("float");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("ResultType")
                        .HasColumnType("int");

                    b.Property<double>("RiskAmount")
                        .HasColumnType("float");

                    b.Property<double>("RiskRewardRatio")
                        .HasColumnType("float");

                    b.Property<string>("SetupID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PairID");

                    b.HasIndex("SetupID");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("FactorSetup", b =>
                {
                    b.HasOne("TM.Domain.Entities.Factor", null)
                        .WithMany()
                        .HasForeignKey("FactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TM.Domain.Entities.Setup", null)
                        .WithMany()
                        .HasForeignKey("SetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TM.Domain.Entities.Trade", b =>
                {
                    b.HasOne("TM.Domain.Entities.Pair", "Pair")
                        .WithMany("Trades")
                        .HasForeignKey("PairID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TM.Domain.Entities.Setup", "Setup")
                        .WithMany("Trades")
                        .HasForeignKey("SetupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pair");

                    b.Navigation("Setup");
                });

            modelBuilder.Entity("TM.Domain.Entities.Pair", b =>
                {
                    b.Navigation("Trades");
                });

            modelBuilder.Entity("TM.Domain.Entities.Setup", b =>
                {
                    b.Navigation("Trades");
                });
#pragma warning restore 612, 618
        }
    }
}
